{
  "elastic/elasticsearch_37980": {
    "id": "elastic/elasticsearch_37980",
    "body": "'Eclipse build files were missing so .eclipse project files were not being generated.\\r\\nCloses #37973\\r\\n\\r\\n'",
    "cms": [
      "'Added missing eclipse-build.gradle files\\n\\nCloses #fix/37973'"
    ],
    "commits": {
      "'3e10ee798c932cc1cab1ea6ca679417408fc1416'": {
        "cm": "'Added missing eclipse-build.gradle files\\n\\nCloses #fix/37973'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37964": {
    "id": "elastic/elasticsearch_37964",
    "body": "'This change adds a _meta field storing the version in which\\r\\nthe index mappings were last updated to the 3 ML indices\\r\\nthat didn't previously have one:\\r\\n\\r\\n- .ml-annotations\\r\\n- .ml-meta\\r\\n- .ml-notifications\\r\\n\\r\\nAll other ML indices already had such a _meta field.\\r\\n\\r\\nThis field will be useful if we ever need to automatically\\r\\nupdate the index mappings during a future upgrade.'",
    "cms": ["'[ML] Add meta information to all ML indices'"],
    "commits": {
      "'df18d6b7d9d2236d1512f7476301ecda15b20401'": {
        "cm": "'[ML] Add meta information to all ML indices'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37961": {
    "id": "elastic/elasticsearch_37961",
    "body": "'While working in #33888 I stumbled upon a trivial test case in which a no-op delete operation is executed on an empty index and this index is later closed and reopened as frozen, making the assertion added in #37426 to trip:\\r\\n\\r\\n```java\\r\\njava.lang.AssertionError: max seq. no. [-1] does not match [5]\\r\\n\\tat __randomizedtesting.SeedInfo.seed([B5AAFD71AAC09533]:0)\\r\\n\\tat org.elasticsearch.index.engine.ReadOnlyEngine.assertMaxSeqNoEqualsToGlobalCheckpoint(ReadOnlyEngine.java:141)\\r\\n\\tat org.elasticsearch.index.engine.ReadOnlyEngine.<init>(ReadOnlyEngine.java:115)\\r\\n\\tat org.elasticsearch.index.engine.FrozenEngine.<init>(FrozenEngine.java:75)\\r\\n\\tat org.elasticsearch.index.shard.IndexShard.innerOpenEngineAndTranslog(IndexShard.java:1431)\\r\\n\\tat org.elasticsearch.index.shard.IndexShard.openEngineAndRecoverFromTranslog(IndexShard.java:1384)\\r\\n\\tat org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:424)\\r\\n\\tat org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$0(StoreRecovery.java:95)\\r\\n\\tat org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:302)\\r\\n\\tat org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:93)\\r\\n\\tat org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1678)\\r\\n\\tat org.elasticsearch.index.shard.IndexShard.lambda$startRecovery$6(IndexShard.java:2228)\\r\\n```\\r\\n\\r\\nThe assertion trips because the Translog is synced with max seq=X and global checkpoint=Y but those information are not flushed into the Lucene commit as no real operation has been executed and the IndexWriter has no uncommited changes. \\r\\n\\r\\nThe flushes executed by `TransportVerifyShardBeforeCloseAction` and `IndexShard.close()` won't persist the max seq no and global checkpoint in the Lucene commit, and when the ReadOnlyEngine is opened it will reload max seq no from the last Lucene commit and will detect a mismatch with the global checkpoint loaded from the translog.\\r\\n\\r\\nThis pull request changes the  `TransportVerifyShardBeforeCloseAction` so that it forces a flush when the Translog.isSyncNeeded() method returns true, indicating that the global checkpoint != the last synced globalcheckpoint and also forces a Lucene commit with the same user data. Or we could always force the flush too.\\r\\n\\r\\n'",
    "cms": ["'Close Index API should force a flush if a sync is needed'"],
    "commits": {
      "'82fc65936cc65fd3e764f1c18f5460dcc800d75e'": {
        "cm": "'Close Index API should force a flush if a sync is needed'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37945": {
    "id": "elastic/elasticsearch_37945",
    "body": "'Adding release highlights for ES.'",
    "cms": [
      "'add es release highlights'",
      "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
      "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
      "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
      "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
      "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
      "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'"
    ],
    "commits": {
      "'6d643fd6cf38dbbf7a0a201c87901a299b5f20e9'": {
        "cm": "'add es release highlights'",
        "comments": []
      },
      "'0f82c284d002eb8efe8dab60f37891266850ef6d'": {
        "cm": "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      },
      "'aa36ad0f8f1ec8b2f34a1eb9dc5fcf4aa9c7c50d'": {
        "cm": "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      },
      "'a728268833bb6a0ba637ccf73d63726c5329ede0'": {
        "cm": "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      },
      "'7ba43435eb7fab49970f3691d01513d31e44db07'": {
        "cm": "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      },
      "'c69b4a799674c091d8cb5acf460a6427ccf158b1'": {
        "cm": "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      },
      "'589e66d4d1cbc900fe3eab61d0b93cc8e2f61a8d'": {
        "cm": "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37943": {
    "id": "elastic/elasticsearch_37943",
    "body": "'This commit improves the example docs for contexts in painless.\\r\\n\\r\\nrelates #34829'",
    "cms": [
      "'Add painless context examples for update and update-by-query\\n\\nThis commit improves the example docs for contexts in painless.\\n\\nrelates #34829'"
    ],
    "commits": {
      "'e57ab3b0a07cafcd7adfd06a84d7cc93ee4f67b3'": {
        "cm": "'Add painless context examples for update and update-by-query\\n\\nThis commit improves the example docs for contexts in painless.\\n\\nrelates #34829'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37939": {
    "id": "elastic/elasticsearch_37939",
    "body": "'Related to https://github.com/elastic/elasticsearch/pull/36796\\r\\n\\r\\nThis PR wraps long sentences and adds the following information about the automated annotations: \\'For example, you can see annotations in {kib} for the periods where these delays occur.\\'\\r\\n\\r\\n'",
    "cms": ["'[DOCS] Wrap long sentences'", "'[DOCS] Add annotation detail'"],
    "commits": {
      "'46691f5ae2c513633830e410290401505364eab4'": {
        "cm": "'[DOCS] Wrap long sentences'",
        "comments": []
      },
      "'d7d73023720310608cd284c7e827c5437f059f0a'": {
        "cm": "'[DOCS] Add annotation detail'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37933": {
    "id": "elastic/elasticsearch_37933",
    "body": "'This commit moves the auditing of job deletion related errors\\r\\nto the final listener in the job delete action. This ensures\\r\\nany error that occurs during job deletion is audited.\\r\\n'",
    "cms": [
      "'[ML] Audit all errors during job deletion\\n\\nThis commit moves the auditing of job deletion related errors\\nto the final listener in the job delete action. This ensures\\nany error that occurs during job deletion is audited.'"
    ],
    "commits": {
      "'9b8d4cb49a6ce4157144191ace401d10f2b77e04'": {
        "cm": "'[ML] Audit all errors during job deletion\\n\\nThis commit moves the auditing of job deletion related errors\\nto the final listener in the job delete action. This ensures\\nany error that occurs during job deletion is audited.'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37923": {
    "id": "elastic/elasticsearch_37923",
    "body": "'The clusterAlias member is only used in the copy constructor, to be able\\r\\nto reconstruct the fully qualified index. It is also possible to remove\\r\\nthe instance member and add a private constructor that accepts the already built Index object which contains the cluster alias.'",
    "cms": [
      "'Remove clusterAlias instance member from QueryShardContext\\n\\nThe clusterAlias member is only used in the copy constructor, to be able\\nto reconstruct the fully qualified index. It is also possible to remove\\nthe instance member and add a private constructor that accepts the already built Index object which contains the cluster alias.'",
      "'Merge branch 'master' into minor/query_shard_context_cluster_alias'",
      "'Merge branch 'master' into minor/query_shard_context_cluster_alias'",
      "'Merge branch 'master' into minor/query_shard_context_cluster_alias'"
    ],
    "commits": {
      "'2e8dfb1ecb380922720b0afe0fb331086818702f'": {
        "cm": "'Remove clusterAlias instance member from QueryShardContext\\n\\nThe clusterAlias member is only used in the copy constructor, to be able\\nto reconstruct the fully qualified index. It is also possible to remove\\nthe instance member and add a private constructor that accepts the already built Index object which contains the cluster alias.'",
        "comments": []
      },
      "'235f1cc2aeb3b5e54805376a87c0a3b1c0a8a71f'": {
        "cm": "'Merge branch 'master' into minor/query_shard_context_cluster_alias'",
        "comments": [
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process.",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * <p>",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     * <p>",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     * <p>",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     *",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener            Alerted when tasks are unassignd",
          "+     */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0"
        ]
      },
      "'7a08371b73996bc02f5693d5cdff8dccd3e232dd'": {
        "cm": "'Merge branch 'master' into minor/query_shard_context_cluster_alias'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action",
          "+        // test the fields is not overwritten"
        ]
      },
      "'5e2eef250babd128d95f9c1532c690615997cf5c'": {
        "cm": "'Merge branch 'master' into minor/query_shard_context_cluster_alias'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37916": {
    "id": "elastic/elasticsearch_37916",
    "body": "'As a follow up from [discussion comment](https://github.com/elastic/elasticsearch/issues/32850#issuecomment-458064462)\\r\\nin order to keep json logs consistent the security aduit logs are renamed from `.log` to `.json`\\r\\n\\r\\nrelates #32850'",
    "cms": [
      "'rename _audit.log to _audit.json'",
      "'Merge branch 'master' into feature/audit-logging-file'",
      "'Merge branch 'master' into feature/audit-logging-file'"
    ],
    "commits": {
      "'2852ec42d6488c3380a86a91f329c6319484a3e5'": {
        "cm": "'rename _audit.log to _audit.json'",
        "comments": []
      },
      "'7659643337caec14c2e59bd3a0a2bc3699198904'": {
        "cm": "'Merge branch 'master' into feature/audit-logging-file'",
        "comments": [
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // check current retention leases have been synced to all replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here"
        ]
      },
      "'f2e9b275dd89f6bd3b1af33f3db2c90ea5599d47'": {
        "cm": "'Merge branch 'master' into feature/audit-logging-file'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process.",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * <p>",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     * <p>",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     * <p>",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     *",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener            Alerted when tasks are unassignd",
          "+     */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0",
          "+        // test the fields is not overwritten"
        ]
      }
    }
  },
  "elastic/elasticsearch_37913": {
    "id": "elastic/elasticsearch_37913",
    "body": "'This commit upgrades the 6.x branch to the latest snapshot of lucene 7.7.0.  This includes:\\r\\n* performance improvements at index and merge time for Points and Updateable DocValues\\r\\n* Bug fixes to Korean Tokenizer\\r\\n* StandardTokenizer can correctly tokenize emojis\\r\\n* Early termination when sorting by docid'",
    "cms": [
      "'Upgrade to lucene-7.7.0-snapshot-874ff046df'",
      "'Merge remote-tracking branch 'origin/6.x' into lucene-upgrade'",
      "'Merge remote-tracking branch 'origin/6.x' into lucene-upgrade'"
    ],
    "commits": {
      "'1bd9c87145ebe0ba75c8d881f496e0468350f112'": {
        "cm": "'Upgrade to lucene-7.7.0-snapshot-874ff046df'",
        "comments": []
      },
      "'953ad9e8dff1f2ef2dc7140848ba3fdd75504574'": {
        "cm": "'Merge remote-tracking branch 'origin/6.x' into lucene-upgrade'",
        "comments": [
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // check current retention leases have been synced to all replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+     * A good starting name for the index storing the job's results.",
          "+     * This defaults to the shared results index if a specific index name is not set.",
          "+     * This method must <em>only</em> be used during initial job creation.",
          "+     * After that the read/write aliases must always be used to access the job's",
          "+     * results index, as the underlying index may roll or be reindexed.",
          "+     * @return The job's initial results index name",
          "+     * Get the unmodified <code>results_index_name</code> field from the job.",
          "+     * This is provided to allow a job to be copied via the builder.",
          "+     * After creation this does not necessarily reflect the actual concrete",
          "+     * index used by the job.  A job's results must always be read and written",
          "+     * using the read and write aliases.",
          "+     * @return The job's configured \\'index name\\'",
          "+        // Make the job's results span an extra two indices, i.e. three in total.",
          "+        // To do this the job's results alias needs to encompass all three indices.",
          "+        // Step 8. If we did not drop the indices and after DBQ state done, we delete the aliases",
          "+        // Step 7. If we did not delete the indices, we run a delete by query",
          "+        // Step 6. If we have any hits, that means we are NOT the only job on these indices, and should not delete the indices.",
          "+        // If we do not have any hits, we can drop the indices and then skip the DBQ and alias deletion.",
          "+        // Step 5. Determine if we are on shared indices by looking at whether the initial index was \\'.ml-anomalies-shared\\'",
          "+        // or whether the indices that the job's results alias points to contain any documents from other jobs.",
          "+        // TODO: this check is currently assuming that a job's results indices are either ALL shared or ALL",
          "+        // dedicated to the job.  We have considered functionality like rolling jobs that generate large",
          "+        // volumes of results from shared to dedicated indices.  On deletion such a job would have a mix of",
          "+        // shared indices requiring DBQ and dedicated indices that could be simply dropped.  The current",
          "+        // functionality would apply DBQ to all these indices, which is safe but suboptimal.  So this functionality",
          "+        // should be revisited when we add rolling results index functionality, especially if we add the ability",
          "+        // to switch a job over to a dedicated index for future results.",
          "+                    // The job may no longer be using the initial shared index, but if it started off on a",
          "+                    // shared index then it will still be on a shared index even if it's been reindexed",
          "+                        // don't bother searching the index any further, we are on the default shared",
          "+                        // don't bother searching the index any further - it's already been closed or deleted",
          "+        // Step 4. Get the job as the initial result index name is required"
        ]
      },
      "'bfbd7963a8fff8c6fbad9222457c00bcc1020c06'": {
        "cm": "'Merge remote-tracking branch 'origin/6.x' into lucene-upgrade'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37912": {
    "id": "elastic/elasticsearch_37912",
    "body": "'Remove `SearchShardTarget` test only constructor and replace all the usages with calls to the other constructor that accepts a `ShardId`.'",
    "cms": [
      "'Remove test only SearchShardTarget constructor'",
      "'Merge branch 'master' into minor/remove_search_shard_target_init'",
      "'Merge branch 'master' into minor/remove_search_shard_target_init'",
      "'Merge branch 'master' into minor/remove_search_shard_target_init'",
      "'Merge branch 'master' into minor/remove_search_shard_target_init'",
      "'Merge branch 'master' into minor/remove_search_shard_target_init'"
    ],
    "commits": {
      "'6a2d159dd8ad6205c1db2b71ebb66a8ab744e92d'": {
        "cm": "'Remove test only SearchShardTarget constructor'",
        "comments": []
      },
      "'e023f0583e06a3309d467683de2d465685aba3b9'": {
        "cm": "'Merge branch 'master' into minor/remove_search_shard_target_init'",
        "comments": [
          "+     * A good starting name for the index storing the job's results.",
          "+     * This defaults to the shared results index if a specific index name is not set.",
          "+     * This method must <em>only</em> be used during initial job creation.",
          "+     * After that the read/write aliases must always be used to access the job's",
          "+     * results index, as the underlying index may roll or be reindexed.",
          "+     * @return The job's initial results index name",
          "+     * Get the unmodified <code>results_index_name</code> field from the job.",
          "+     * This is provided to allow a job to be copied via the builder.",
          "+     * After creation this does not necessarily reflect the actual concrete",
          "+     * index used by the job.  A job's results must always be read and written",
          "+     * using the read and write aliases.",
          "+     * @return The job's configured \\'index name\\'",
          "+        // Make the job's results span an extra two indices, i.e. three in total.",
          "+        // To do this the job's results alias needs to encompass all three indices.",
          "+        // Step 8. If we did not drop the indices and after DBQ state done, we delete the aliases",
          "+        // Step 7. If we did not delete the indices, we run a delete by query",
          "+        // Step 6. If we have any hits, that means we are NOT the only job on these indices, and should not delete the indices.",
          "+        // If we do not have any hits, we can drop the indices and then skip the DBQ and alias deletion.",
          "+        // Step 5. Determine if we are on shared indices by looking at whether the initial index was \\'.ml-anomalies-shared\\'",
          "+        // or whether the indices that the job's results alias points to contain any documents from other jobs.",
          "+        // TODO: this check is currently assuming that a job's results indices are either ALL shared or ALL",
          "+        // dedicated to the job.  We have considered functionality like rolling jobs that generate large",
          "+        // volumes of results from shared to dedicated indices.  On deletion such a job would have a mix of",
          "+        // shared indices requiring DBQ and dedicated indices that could be simply dropped.  The current",
          "+        // functionality would apply DBQ to all these indices, which is safe but suboptimal.  So this functionality",
          "+        // should be revisited when we add rolling results index functionality, especially if we add the ability",
          "+        // to switch a job over to a dedicated index for future results.",
          "+                    // The job may no longer be using the initial shared index, but if it started off on a",
          "+                    // shared index then it will still be on a shared index even if it's been reindexed",
          "+                        // don't bother searching the index any further, we are on the default shared",
          "+                        // don't bother searching the index any further - it's already been closed or deleted",
          "+        // Step 4. Get the job as the initial result index name is required"
        ]
      },
      "'2447161a8241c7a3509f9cb0fc94443fa24b4202'": {
        "cm": "'Merge branch 'master' into minor/remove_search_shard_target_init'",
        "comments": [
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // check current retention leases have been synced to all replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here"
        ]
      },
      "'dbfe2df99e988308e67c40ea124fb5d0e383dc89'": {
        "cm": "'Merge branch 'master' into minor/remove_search_shard_target_init'",
        "comments": [
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process.",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * <p>",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     * <p>",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     * <p>",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     *",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener            Alerted when tasks are unassignd",
          "+     */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0"
        ]
      },
      "'4a2e9c0a63a9acb38002c0a9adc5ac2f4bd87fa0'": {
        "cm": "'Merge branch 'master' into minor/remove_search_shard_target_init'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action",
          "+        // test the fields is not overwritten"
        ]
      },
      "'896630fbd4ad3ae60f7141725020404bd41dcf8a'": {
        "cm": "'Merge branch 'master' into minor/remove_search_shard_target_init'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37911": {
    "id": "elastic/elasticsearch_37911",
    "body": "'When serializing allowPartialSearchResults to the shards through ShardSearchTransportRequest, we use an optional boolean field, though\\r\\nthe corresponding instance member is declared `boolean` which can never\\r\\nbe null. We also have an assert to verify that the incoming search\\r\\nrequest provides a non-null value for the flag, and a comment explaining\\r\\nthat null should be considered a bug.\\r\\n\\r\\nThis commit makes the allowPartialSearchResults method in\\r\\nShardSearchRequest return a `boolean` rather than a `Boolean` and\\r\\nchanges the serialization from optional to non optional, in a bw comp manner.'",
    "cms": [
      "'Clean up allowPartialSearchResults serialization\\n\\nWhen serializing allowPartialSearchResults to the shards through ShardSearchTransportRequest, we use an optional boolean field, though\\nthe corresponding instance member is declared `boolean` which can never\\nbe null. We also have an assert to verify that the incoming search\\nrequest provides a non-null value for the flag, and a comment explaining\\nthat null should be considered a bug.\\n\\nThis commit makes the allowPartialSearchResults method in\\nShardSearchRequest return a `boolean` rather than a `Boolean` and\\nchanges the serialization from optional to non optional, in a bw comp manner.'",
      "'Merge branch 'master' into minor/allow_partial_results_serialization'",
      "'Merge branch 'master' into minor/allow_partial_results_serialization'",
      "'Merge branch 'master' into minor/allow_partial_results_serialization'",
      "'Merge branch 'master' into minor/allow_partial_results_serialization'",
      "'Merge branch 'master' into minor/allow_partial_results_serialization'"
    ],
    "commits": {
      "'e4e0d1215c6a144cd0a0c9ff8d43700f9e9f3048'": {
        "cm": "'Clean up allowPartialSearchResults serialization\\n\\nWhen serializing allowPartialSearchResults to the shards through ShardSearchTransportRequest, we use an optional boolean field, though\\nthe corresponding instance member is declared `boolean` which can never\\nbe null. We also have an assert to verify that the incoming search\\nrequest provides a non-null value for the flag, and a comment explaining\\nthat null should be considered a bug.\\n\\nThis commit makes the allowPartialSearchResults method in\\nShardSearchRequest return a `boolean` rather than a `Boolean` and\\nchanges the serialization from optional to non optional, in a bw comp manner.'",
        "comments": []
      },
      "'6972427f5e720353daee756f4072646e9e4f1bd3'": {
        "cm": "'Merge branch 'master' into minor/allow_partial_results_serialization'",
        "comments": [
          "+     * A good starting name for the index storing the job's results.",
          "+     * This defaults to the shared results index if a specific index name is not set.",
          "+     * This method must <em>only</em> be used during initial job creation.",
          "+     * After that the read/write aliases must always be used to access the job's",
          "+     * results index, as the underlying index may roll or be reindexed.",
          "+     * @return The job's initial results index name",
          "+     * Get the unmodified <code>results_index_name</code> field from the job.",
          "+     * This is provided to allow a job to be copied via the builder.",
          "+     * After creation this does not necessarily reflect the actual concrete",
          "+     * index used by the job.  A job's results must always be read and written",
          "+     * using the read and write aliases.",
          "+     * @return The job's configured \\'index name\\'",
          "+        // Make the job's results span an extra two indices, i.e. three in total.",
          "+        // To do this the job's results alias needs to encompass all three indices.",
          "+        // Step 8. If we did not drop the indices and after DBQ state done, we delete the aliases",
          "+        // Step 7. If we did not delete the indices, we run a delete by query",
          "+        // Step 6. If we have any hits, that means we are NOT the only job on these indices, and should not delete the indices.",
          "+        // If we do not have any hits, we can drop the indices and then skip the DBQ and alias deletion.",
          "+        // Step 5. Determine if we are on shared indices by looking at whether the initial index was \\'.ml-anomalies-shared\\'",
          "+        // or whether the indices that the job's results alias points to contain any documents from other jobs.",
          "+        // TODO: this check is currently assuming that a job's results indices are either ALL shared or ALL",
          "+        // dedicated to the job.  We have considered functionality like rolling jobs that generate large",
          "+        // volumes of results from shared to dedicated indices.  On deletion such a job would have a mix of",
          "+        // shared indices requiring DBQ and dedicated indices that could be simply dropped.  The current",
          "+        // functionality would apply DBQ to all these indices, which is safe but suboptimal.  So this functionality",
          "+        // should be revisited when we add rolling results index functionality, especially if we add the ability",
          "+        // to switch a job over to a dedicated index for future results.",
          "+                    // The job may no longer be using the initial shared index, but if it started off on a",
          "+                    // shared index then it will still be on a shared index even if it's been reindexed",
          "+                        // don't bother searching the index any further, we are on the default shared",
          "+                        // don't bother searching the index any further - it's already been closed or deleted",
          "+        // Step 4. Get the job as the initial result index name is required"
        ]
      },
      "'4d96f259fbd193ae4edd647d044ed5deda7fbc03'": {
        "cm": "'Merge branch 'master' into minor/allow_partial_results_serialization'",
        "comments": [
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // check current retention leases have been synced to all replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here"
        ]
      },
      "'000e225213e02b3783ffa521d9668c18b39010a8'": {
        "cm": "'Merge branch 'master' into minor/allow_partial_results_serialization'",
        "comments": [
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process.",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * <p>",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     * <p>",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     * <p>",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     *",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener            Alerted when tasks are unassignd",
          "+     */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0"
        ]
      },
      "'6679c19834d57ee70f4a513f5bdeaf0a62239a7f'": {
        "cm": "'Merge branch 'master' into minor/allow_partial_results_serialization'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action",
          "+        // test the fields is not overwritten"
        ]
      },
      "'e034e0bcf8ef67d882c84d03123a4bdcd5557635'": {
        "cm": "'Merge branch 'master' into minor/allow_partial_results_serialization'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37910": {
    "id": "elastic/elasticsearch_37910",
    "body": "'This change makes `:server:integTest` run with `./gradlew internalClusterTest`.\\r\\nThere's a new CI job that runs this.'",
    "cms": [
      "'Add an alias for :server:integTest so it runs as part of internalClusterTest'"
    ],
    "commits": {
      "'768765a43caa8d02c8af5a9b85645564a16b71a2'": {
        "cm": "'Add an alias for :server:integTest so it runs as part of internalClusterTest'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37904": {
    "id": "elastic/elasticsearch_37904",
    "body": "'The docs silently accept duplicate note markers (such as `<3>` here) but\\r\\nformats them in an unexpected way. This change removes this duplication so that\\r\\nthe rendered documentation looks as intended.'",
    "cms": [
      "'Fix duplicate note x-refs in mapping.asciidoc\\n\\nThe docs silently accept duplicate note markers (such as `<3>` here) but\\nformats them in an unexpected way. This change removes this duplication so that\\nthe rendered documentation looks as intended.'"
    ],
    "commits": {
      "'1b31b07585b0aeb697be9afd62eb4135f0fce44d'": {
        "cm": "'Fix duplicate note x-refs in mapping.asciidoc\\n\\nThe docs silently accept duplicate note markers (such as `<3>` here) but\\nformats them in an unexpected way. This change removes this duplication so that\\nthe rendered documentation looks as intended.'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37903": {
    "id": "elastic/elasticsearch_37903",
    "body": "'We changed the `action.auto_create_index` setting to be a dynamic cluster-level\\r\\nsetting in #20274 but today the reference manual indicates that it is still a\\r\\nstatic node-level setting. This commit addresses this, and clarifies the\\r\\nsemantics of patterns that may both permit and forbid the creation of certain\\r\\nindices.\\r\\n\\r\\nRelates #7513'",
    "cms": [
      "'Document that auto_create_index is dynamic\\n\\nWe changed the `action.auto_create_index` setting to be a dynamic cluster-level\\nsetting in #20274 but today the reference manual indicates that it is still a\\nstatic node-level setting. This commit addresses this, and clarifies the\\nsemantics of patterns that may both permit and forbid the creation of certain\\nindices.\\n\\nRelates #7513'"
    ],
    "commits": {
      "'85d90a55ee8471d669a8041ec63f064bbcfaeb03'": {
        "cm": "'Document that auto_create_index is dynamic\\n\\nWe changed the `action.auto_create_index` setting to be a dynamic cluster-level\\nsetting in #20274 but today the reference manual indicates that it is still a\\nstatic node-level setting. This commit addresses this, and clarifies the\\nsemantics of patterns that may both permit and forbid the creation of certain\\nindices.\\n\\nRelates #7513'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37902": {
    "id": "elastic/elasticsearch_37902",
    "body": "'This commit introduces a sync of retention leases when a retention lease expires. As expiration of retention leases is lazy, their expiration is managed only when getting the current retention leases from the replication tracker. At this point, we callback to our full retention lease sync to sync and flush these on all shard copies. With this change, replicas do not locally manage expiration of retention leases; instead, that is done only on the primary.\\r\\n\\r\\nRelates #37165'",
    "cms": [
      "'Sync retention leases on expiration\\n\\nThis commit introduces a sync of retention leases when a retention lease\\nexpires. As expiration of retention leases is lazy, their expiration is\\nmanaged only when getting the current retention leases from the\\nreplication tracker. At this point, we callback to our full retention\\nlease sync to sync and flush these on all shard copies. With this\\nchange, replicas do not locally manage expiration of retention leases;\\ninstead, that is done only on the primary.'",
      "'Add sync assertion on replica'",
      "'Fix checkstyle'"
    ],
    "commits": {
      "'3b891d1e524c8fd9f291ff3631bfe40299cb691d'": {
        "cm": "'Sync retention leases on expiration\\n\\nThis commit introduces a sync of retention leases when a retention lease\\nexpires. As expiration of retention leases is lazy, their expiration is\\nmanaged only when getting the current retention leases from the\\nreplication tracker. At this point, we callback to our full retention\\nlease sync to sync and flush these on all shard copies. With this\\nchange, replicas do not locally manage expiration of retention leases;\\ninstead, that is done only on the primary.'",
        "comments": [
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here"
        ]
      },
      "'58225cbdfa6f3ff4951ec97b722ef5fb612ff77b'": {
        "cm": "'Add sync assertion on replica'",
        "comments": [
          "+            // check current retention leases have been synced to all replicas"
        ]
      },
      "'5de2acb4f40eaf90c72b248b436a2de1231388f2'": {
        "cm": "'Fix checkstyle'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37899": {
    "id": "elastic/elasticsearch_37899",
    "body": "'When a shard on a data node finished to recover, the data node sends a `StartedShardEntry` request to the master node. This request contains the shard id, an allocation id and the id of the node that holds the shard to start. This request is then processed by the master node which checks that the shard exists in the cluster state with the same allocation id as in the request.\\r\\n\\r\\nThis pull request changes the `StartedShardEntry` so that it also contains the primary term of the shard to start. This way the master node can also checks that the primary term from the start request is equal to the current shard's primary term in the cluster state, and it can ignore any shard started request that would concerns a previous instance of the shard that would have been allocated to the same node.\\r\\n\\r\\nSuch situation are likely to happen with frozen (or restored) indices and the replication of closed indices, because with replicated closed indices the shards will be initialized again after the index is closed and can potentially be re initialized again if the index is reopened as a frozen index. In such cases the lifecycle of the shards would be something like: \\r\\n- shard is STARTED\\r\\n- index is closed\\r\\n- shards is INITIALIZING (index state is CLOSED, primary term is X)\\r\\n- index is reopened\\r\\n- shards are INITIALIZING again (index state is OPENED, potentially frozen, primary term is X+1)\\r\\n\\r\\nAdding the primary term to the shard started request will allow to discard potential `StartedShardEntry` requests received by the master node if the request concerns the shard with primary term X because it has been moved/reinitialized in the meanwhile under the primary term X+1.\\r\\n\\r\\nRelates to #33888 '",
    "cms": [
      "'Use primary terms to start shards'",
      "'Apply feedback'",
      "'Adapt test'",
      "'Move IndexMetadata lookup and fix test when primary term == 1'",
      "'Merge branch 'master' into use-primary-term-to-start-shards'"
    ],
    "commits": {
      "'2cf4b139c5b212e76378d68ee0822c7395aa32ee'": {
        "cm": "'Use primary terms to start shards'",
        "comments": [
          "+                    // tasks that correspond to non-existent indices are marked as successful",
          "+                // the master thinks we are initializing, but we are already started or on POST_RECOVERY and waiting",
          "+                // for master to confirm a shard started message (either master failover, or a cluster event before",
          "+                // we managed to tell the master we started), mark us as started"
        ]
      },
      "'ebfa5b5ed8ea589330b993f01e251b6d54c912ab'": {
        "cm": "'Apply feedback'",
        "comments": [
          "+                    // tasks that correspond to non-existent shards are marked as successful. The reason is that we resend shard started",
          "+                    // events on every cluster state publishing that does not contain the shard as started yet. This means that old stale",
          "+                    // requests might still be in flight even after the shard has already been started or failed on the master. We just",
          "+                    // ignore these requests for now.",
          "+            // the master thinks we are initializing, but we are already started or on POST_RECOVERY and waiting",
          "+            // for master to confirm a shard started message (either master failover, or a cluster event before",
          "+            // we managed to tell the master we started), mark us as started",
          "+        /**",
          "+         * ShardRouting with which the shard was created",
          "+         */",
          "+        /**",
          "+         * Primary term with which the shard was created",
          "+         */"
        ]
      },
      "'8c19deaf765aa24343f239867ce15002de4f0d91'": {
        "cm": "'Adapt test'",
        "comments": []
      },
      "'2d39807654f9183c06b0befd925494d5313dfc47'": {
        "cm": "'Move IndexMetadata lookup and fix test when primary term == 1'",
        "comments": []
      },
      "'a61c78c74aeb007cac002ac3b0ce183cf5963fa1'": {
        "cm": "'Merge branch 'master' into use-primary-term-to-start-shards'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action",
          "+        // test the fields is not overwritten"
        ]
      }
    }
  },
  "elastic/elasticsearch_37890": {
    "id": "elastic/elasticsearch_37890",
    "body": "'* The test failure reported in the issue looks like a mere timeout. Logging suggests that the snapshot completes/aborts correctly but the busy loop polling the snapshot state times out too early.\\r\\n* Closes #37888\\r\\n'",
    "cms": [
      "'Increase Timeout in #testSnapshotCanceled\\n\\n* The test failure reported in the issue looks like a mere timeout. Logging suggestst hat the snapshot completes/aborts correctly but the busy\\nloop polling the snapshot state times out too early.\\n* Closes #37888'"
    ],
    "commits": {
      "'55f3d2ab3e6124009299ecf4c4f8ba6c5714c6ce'": {
        "cm": "'Increase Timeout in #testSnapshotCanceled\\n\\n* The test failure reported in the issue looks like a mere timeout. Logging suggestst hat the snapshot completes/aborts correctly but the busy\\nloop polling the snapshot state times out too early.\\n* Closes #37888'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37886": {
    "id": "elastic/elasticsearch_37886",
    "body": "'If the index request is executed before the put-mapping update is applied on\\r\\nthe IndexShard, the index request will perform a dynamic mapping update.\\r\\nThis mapping update will be timeout (i.e, ProcessClusterEventTimeoutException)\\r\\nbecause the latch is still closed. This leads to the failure of the index\\r\\nrequest and the test. This commit makes sure the mapping is ready\\r\\nbefore we execute the index request.\\r\\n\\r\\nRelates #37633\\r\\nCloses #37807\\r\\n'",
    "cms": [
      "'Wait for mapping ready in testReadRequestsReturnLatestMappingVersion\\n\\nIf the index request is executed before the mapping update is applied on\\nthe IndexShard, the index request will perform a dynamic mapping update.\\nThis mapping update will be timeout (i.e, ProcessClusterEventTimeoutException)\\nbecause the latch is not open. This leads to the failure of the index\\nrequest and the test. This commit makes sure the mapping is ready\\nbefore we execute the index request.\\n\\nCloses #37807'",
      "'Merge branch 'master' into block-mapping-test'"
    ],
    "commits": {
      "'af9c3af4892ae622e5fc263dd81638e6d37fb864'": {
        "cm": "'Wait for mapping ready in testReadRequestsReturnLatestMappingVersion\\n\\nIf the index request is executed before the mapping update is applied on\\nthe IndexShard, the index request will perform a dynamic mapping update.\\nThis mapping update will be timeout (i.e, ProcessClusterEventTimeoutException)\\nbecause the latch is not open. This leads to the failure of the index\\nrequest and the test. This commit makes sure the mapping is ready\\nbefore we execute the index request.\\n\\nCloses #37807'",
        "comments": [
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed."
        ]
      },
      "'fa2b13d619a402cfce4beec0d02c5aff189c019b'": {
        "cm": "'Merge branch 'master' into block-mapping-test'",
        "comments": [
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+            // write a snapshot of current time, which is not per se the time field"
        ]
      }
    }
  },
  "elastic/elasticsearch_37885": {
    "id": "elastic/elasticsearch_37885",
    "body": "'This commit fixes the distribution flavor passed to the docs tests to be\\r\\nthe same as the distribution. These two values are now in sync (either\\r\\noss or default) for the docs tests.\\r\\n'",
    "cms": [
      "'Pass distribution type through to docs tests\\n\\nThis commit fixes the distribution flavor passed to the docs tests to be\\nthe same as the distribution. These two values are now in sync (either\\noss or default) for the docs tests.'"
    ],
    "commits": {
      "'4a38c63f744a92f8974b7535ae2807a30643c8dc'": {
        "cm": "'Pass distribution type through to docs tests\\n\\nThis commit fixes the distribution flavor passed to the docs tests to be\\nthe same as the distribution. These two values are now in sync (either\\noss or default) for the docs tests.'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37884": {
    "id": "elastic/elasticsearch_37884",
    "body": "'This commit wraps the packaging test task for reproducing a vagrant test\\r\\nfailure in quotes. The task names sometimes contain \\'#\\', which confuses\\r\\nbash.'",
    "cms": [
      "'Use quotes in reproduce line task for vagrant failure\\n\\nThis commit wraps the packaging test task for reproducing a vagrant test\\nfailure in quotes. The task names sometimes contain \\'#\\', which confuses\\nbash.'",
      "'Merge branch 'master' into packaging_repro1'",
      "'fix accidental leftover from other branch'"
    ],
    "commits": {
      "'923844b04262063ff3165a073128394df3807b1f'": {
        "cm": "'Use quotes in reproduce line task for vagrant failure\\n\\nThis commit wraps the packaging test task for reproducing a vagrant test\\nfailure in quotes. The task names sometimes contain \\'#\\', which confuses\\nbash.'",
        "comments": []
      },
      "'567fc8edece55843180f089aec3812e0a36f8370'": {
        "cm": "'Merge branch 'master' into packaging_repro1'",
        "comments": [
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+            // write a snapshot of current time, which is not per se the time field"
        ]
      },
      "'a0235f0a0a5ff32a583e0d55a55e6ac15ba1f42c'": {
        "cm": "'fix accidental leftover from other branch'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37879": {
    "id": "elastic/elasticsearch_37879",
    "body": "'This deletes the unused code that upgrades ML anomalies index. \\r\\n\\r\\nReverts customer facing parts of #36643\\r\\n\\r\\n\\r\\n\\r\\n'",
    "cms": ["'ML: removing unnecessary upgrade code'"],
    "commits": {
      "'17f6bb045b5416c0fd5655b8ae77325d3d9a8b1d'": {
        "cm": "'ML: removing unnecessary upgrade code'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37878": {
    "id": "elastic/elasticsearch_37878",
    "body": "'* Disable Minio fixture and tests that require it when fixtures are disabled or Docker is not available\\r\\n* Relates #37852\\r\\n'",
    "cms": [
      "'Fix S3 Repository ITs When Docker is not Available\\n\\n* Disable Minio fixture and tests that require it whne fixtures are disabled or Docker is not available\\n* Relates #37852'"
    ],
    "commits": {
      "'3f1966133cdf8151a8e2065a9397eed3e845f71f'": {
        "cm": "'Fix S3 Repository ITs When Docker is not Available\\n\\n* Disable Minio fixture and tests that require it whne fixtures are disabled or Docker is not available\\n* Relates #37852'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37876": {
    "id": "elastic/elasticsearch_37876",
    "body": "'This turned out to not be true and is tackled by #37639 . That PR will be part of 6.7\\r\\n'",
    "cms": [
      "'Remove statement about search and optimistic concurrency control from 6.6 docs\\n\\nThis turned out to not be true and is tackled by #37639 . That PR will be part of 6.7'"
    ],
    "commits": {
      "'5dcae0e6e650c4ba51aea01443cfe09adc532707'": {
        "cm": "'Remove statement about search and optimistic concurrency control from 6.6 docs\\n\\nThis turned out to not be true and is tackled by #37639 . That PR will be part of 6.7'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37874": {
    "id": "elastic/elasticsearch_37874",
    "body": "'We have read and write aliases for the ML results indices.  However,\\r\\nthe job still had methods that purported to reliably return the name\\r\\nof the concrete results index being used by the job.  After reindexing\\r\\nprior to upgrade to 7.x this will be wrong, so the method has been\\r\\nrenamed and the comments made more explicit to say the returned index\\r\\nname may not be the actual concrete index name for the lifetime of the\\r\\njob.  Additionally, the selection of indices when deleting the job\\r\\nhas been changed so that it works regardless of concrete index names.\\r\\n\\r\\nAll these changes are nice-to-have for 6.7 and 7.0, but will become\\r\\ncritical if we add rolling results indices in the 7.x release stream\\r\\nas 6.7 and 7.0 nodes may have to operate in a mixed version cluster\\r\\nthat includes a version that can roll results indices.'",
    "cms": [
      "'[ML] Tighten up use of aliases rather than concrete indices\\n\\nWe have read and write aliases for the ML results indices.  However,\\nthe job still had methods that purported to reliably return the name\\nof the concrete results index being used by the job.  After reindexing\\nprior to upgrade to 7.x this will be wrong, so the method has been\\nrenamed and the comments made more explicit to say the returned index\\nname may not be the actual concrete index name for the lifetime of the\\njob.  Additionally, the selection of indices when deleting the job\\nhas been changed so that it works regardless of concrete index names.\\n\\nAll these changes are nice-to-have for 6.7 and 7.0, but will become\\ncritical if we add rolling results indices in the 7.x release stream\\nas 6.7 and 7.0 nodes may have to operate in a mixed version cluster\\nthat includes a version that can roll results indices.'",
      "'Make test more realistic\\n\\nNow we're always using the job's aliases for index access\\nthe multi-index delete test needs to set up the correct\\naliases.'",
      "'Merge branch 'master' into tighten_up_job_results_alias_use'"
    ],
    "commits": {
      "'51097b8f7ebae681bc3da18e93a537e8e2e5da83'": {
        "cm": "'[ML] Tighten up use of aliases rather than concrete indices\\n\\nWe have read and write aliases for the ML results indices.  However,\\nthe job still had methods that purported to reliably return the name\\nof the concrete results index being used by the job.  After reindexing\\nprior to upgrade to 7.x this will be wrong, so the method has been\\nrenamed and the comments made more explicit to say the returned index\\nname may not be the actual concrete index name for the lifetime of the\\njob.  Additionally, the selection of indices when deleting the job\\nhas been changed so that it works regardless of concrete index names.\\n\\nAll these changes are nice-to-have for 6.7 and 7.0, but will become\\ncritical if we add rolling results indices in the 7.x release stream\\nas 6.7 and 7.0 nodes may have to operate in a mixed version cluster\\nthat includes a version that can roll results indices.'",
        "comments": [
          "+     * A good starting name for the index storing the job's results.",
          "+     * This defaults to the shared results index if a specific index name is not set.",
          "+     * This method must <em>only</em> be used during initial job creation.",
          "+     * After that the read/write aliases must always be used to access the job's",
          "+     * results index, as the underlying index may roll or be reindexed.",
          "+     * @return The job's initial results index name",
          "+     * Get the unmodified <code>results_index_name</code> field from the job.",
          "+     * This is provided to allow a job to be copied via the builder.",
          "+     * After creation this does not necessarily reflect the actual concrete",
          "+     * index used by the job.  A job's results must always be read and written",
          "+     * using the read and write aliases.",
          "+     * @return The job's configured \\'index name\\'",
          "+        // Step 8. If we did not drop the indices and after DBQ state done, we delete the aliases",
          "+        // Step 7. If we did not delete the indices, we run a delete by query",
          "+        // Step 6. If we have any hits, that means we are NOT the only job on these indices, and should not delete the indices.",
          "+        // If we do not have any hits, we can drop the indices and then skip the DBQ and alias deletion.",
          "+        // Step 5. Determine if we are on shared indices by looking at whether the initial index was \\'.ml-anomalies-shared\\'",
          "+        // or whether the indices that the job's results alias points to contain any documents from other jobs.",
          "+        // TODO: this check is currently assuming that a job's results indices are either ALL shared or ALL",
          "+        // dedicated to the job.  We have considered functionality like rolling jobs that generate large",
          "+        // volumes of results from shared to dedicated indices.  On deletion such a job would have a mix of",
          "+        // shared indices requiring DBQ and dedicated indices that could be simply dropped.  The current",
          "+        // functionality would apply DBQ to all these indices, which is safe but suboptimal.  So this functionality",
          "+        // should be revisited when we add rolling results index functionality, especially if we add the ability",
          "+        // to switch a job over to a dedicated index for future results.",
          "+                    // The job may no longer be using the initial shared index, but if it started off on a",
          "+                    // shared index then it will still be on a shared index even if it's been reindexed",
          "+                        // don't bother searching the index any further, we are on the default shared",
          "+                        // don't bother searching the index any further - it's already been closed or deleted",
          "+        // Step 4. Get the job as the initial result index name is required"
        ]
      },
      "'9b614fc395333a62605ed6320ce8b9ece37a07c0'": {
        "cm": "'Make test more realistic\\n\\nNow we're always using the job's aliases for index access\\nthe multi-index delete test needs to set up the correct\\naliases.'",
        "comments": [
          "+        // Make the job's results span an extra two indices, i.e. three in total.",
          "+        // To do this the job's results alias needs to encompass all three indices."
        ]
      },
      "'d9cd90e333dc563ad8426b27ada4e9c7e687ec59'": {
        "cm": "'Merge branch 'master' into tighten_up_job_results_alias_use'",
        "comments": [
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+                        // Flatten multipoints",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+                // Always true because we include 'other' in the agg",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Convert geo point into a hash string (bucket string ID)",
          "+     */",
          "+    /**",
          "+     * Create a new named {@link GeoGridAggregationBuilder}-derived builder",
          "+     */",
          "+            // Intentionally not writing any docs",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGrid}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGridBucket}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Encode longitude and latitude with a given precision as a long hash.",
          "+     */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    // TODO: remove this method when Java time formats are the default",
          "+                        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+    // This is because parsing timestamps using Joda formats generates warnings.",
          "+    // Eventually we'll probably just remove the checks that the Joda formats",
          "+    // are valid, and at that point this method can be removed too.",
          "+    // This method is using the Joda BWC layer.  When that's removed, this method",
          "+    // can be deleted - we'll just validate the Java time formats after that.",
          "+    // Also remove enableWarningsCheck() above if this method is removed."
        ]
      }
    }
  },
  "elastic/elasticsearch_37872": {
    "id": "elastic/elasticsearch_37872",
    "body": "'The update request has a lesser known support for a one off update of a known document version. This PR adds an a seq# based alternative to power these operations.\\r\\n\\r\\nRelates #36148 \\r\\nRelates #10708'",
    "cms": [
      "'wip'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
      "'add rest test'",
      "'lint'",
      "'fix write issue'",
      "'sigh'",
      "'wires'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
      "'sigh'",
      "'numbers are hard'",
      "'rest fix'",
      "'some assertions'",
      "'wrong field'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
      "'feedback'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
      "'conditional'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'"
    ],
    "commits": {
      "'d297d875fff4bf1350bf75b13651fcc681a49ead'": {
        "cm": "'wip'",
        "comments": [
          "+    /**",
          "+     * only perform this update request if the document was last modification was assigned the given",
          "+     * sequence number. Must be used in combination with {@link #setIfPrimaryTerm(long)}",
          "+     *",
          "+     * If the document last modification was assigned a different sequence number a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * only performs this update request if the document was last modification was assigned the given",
          "+     * primary term. Must be used in combination with {@link #setIfSeqNo(long)}",
          "+     *",
          "+     * If the document last modification was assigned a different term a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * If set, only perform this update request if the document was last modification was assigned this sequence number.",
          "+     * If the document last modification was assigned a different sequence number a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * If set, only perform this update request if the document was last modification was assigned this primary term.",
          "+     *",
          "+     * If the document last modification was assigned a different term a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * only perform this update request if the document was last modification was assigned the given",
          "+     * sequence number. Must be used in combination with {@link #setIfPrimaryTerm(long)}",
          "+     *",
          "+     * If the document last modification was assigned a different sequence number a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * only perform this update request if the document was last modification was assigned the given",
          "+     * primary term. Must be used in combination with {@link #setIfSeqNo(long)}",
          "+     *",
          "+     * If the document last modification was assigned a different term a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */"
        ]
      },
      "'41632be268189769ddf0ffeefed37a304b701bfa'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // Create leader index:",
          "+            // Follow index, so that we can query for follow stats:",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the MatrixStats package",
          "+ * This meta field only exists because rank feature fields index everything into a",
          "+ * Query to run on a [rank_feature] field.",
          "+     * Scoring function for a [rank_feature] field.",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the Join package"
        ]
      },
      "'cb585db70e3bc7ac1a80cd85c33f6050dd9470da'": {
        "cm": "'add rest test'",
        "comments": []
      },
      "'e7eb0a73e8e4e6c6d23fe42fa6fd412aed99865e'": {
        "cm": "'lint'",
        "comments": []
      },
      "'11d3986c86f4c5523135c164048874c309da68f9'": {
        "cm": "'fix write issue'",
        "comments": []
      },
      "'1b4fbf1fc6e87c9a836210bc3ceeb1fc02c1e510'": {
        "cm": "'sigh'",
        "comments": []
      },
      "'8d2a1a553e2141856a44c129946a5300cf5cee9a'": {
        "cm": "'wires'",
        "comments": []
      },
      "'2bb0b0e04e6d398e8c55467e9037b7b9bc7c355a'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": [
          "+    // package private for tests",
          "+        // validate the join on the joining node, will throw a failure if it fails the validation"
        ]
      },
      "'4cb6b60ffb872249cf35d5d24317542cfa13c78a'": {
        "cm": "'sigh'",
        "comments": []
      },
      "'dc89962aa2e73484783db5488a3f2fb44d321f77'": {
        "cm": "'numbers are hard'",
        "comments": []
      },
      "'96dd81ee66b7fe98473a50ef0a731d5e80846e99'": {
        "cm": "'rest fix'",
        "comments": []
      },
      "'ff6c34e90c808eed01223bcb86f6a186bab44f12'": {
        "cm": "'some assertions'",
        "comments": []
      },
      "'2b8f9f84578514ca5271fbf597ad528ee7202e38'": {
        "cm": "'wrong field'",
        "comments": []
      },
      "'46fd7da8ded96f015bb8d1a909bb3d2eda84c4b7'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": [
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+            // total hits is null in the response if the tracking of total hits is disabled",
          "+            // no matter what the value of track_total_hits is",
          "+    /**",
          "+     * Reads an optional {@link Integer}.",
          "+     */",
          "+    /**",
          "+     * Writes an optional {@link Integer}.",
          "+     */",
          "+     * Modify the search request to accurately count the total hits that match the query",
          "+     * if {@link #TOTAL_HITS_AS_INT_PARAM} is set.",
          "+     *",
          "+     * @throws IllegalArgumentException if {@link #TOTAL_HITS_AS_INT_PARAM}",
          "+     * is used in conjunction with a lower bound value (other than {@link SearchContext#DEFAULT_TRACK_TOTAL_HITS_UP_TO})",
          "+     * for the track_total_hits option.",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+    /**",
          "+     * Returns the total hit count that should be tracked or null if the value is unset.",
          "+     * Defaults to null.",
          "+     */",
          "+    /**",
          "+     * Returns true if this collector has early terminated.",
          "+     */",
          "+        // client() also starts the node",
          "+        // build settings using same path.data as original but with node.data=false and node.master=false",
          "+        // test that we can create data=false and master=false with no meta information",
          "+        // test that we can create data=false env with only meta information. Also create shard data for following asserts",
          "+        // assert that we get the stricter message on meta-data when both conditions fail",
          "+        // build settings using same path.data as original but with node.master=false",
          "+        // test that we can create master=false env regardless of data.",
          "+        // test that we can create data=true, master=true env. Also remove state dir to leave only shard data for following asserts",
          "+        // assert that we fail on shard data even without the metadata dir.",
          "+    /**",
          "+     * Testcase for https://github.com/elastic/elasticsearch/issues/37303",
          "+     */",
          "+                //since the value(49.95) is a constant, variance should be 0",
          "+     * The number of buckets with few records compared to the overall counts.",
          "+            // intentionally empty",
          "+            // intentionally empty",
          "+            // always track total hits accurately",
          "+     *"
        ]
      },
      "'591704620e89559533a29ff99126b782677a074d'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": [
          "+    /**",
          "+     * Retrieves the mappings on an index or indices using the Get Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html\\'>",
          "+     * Get Mapping API on elastic.co</a>",
          "+     * @param getMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated",
          "+     * feature. The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which",
          "+     * accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the mappings on an index on indices using the Get Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html\\'>",
          "+     * Get Mapping API on elastic.co</a>",
          "+     * @param getMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which",
          "+     * accepts a new request object.",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be",
          "+     * used instead, which accepts a new request object.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Indicates whether the receiving node should operate based on local index information or",
          "+     * forward requests, where needed, to other nodes. If running locally, request will not",
          "+     * raise errors if local index information is missing.",
          "+     */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // 24 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    // Because the client-side class does not have a toXContent method, we test xContent serialization by creating",
          "+    // a random client object, converting it to a server object then serializing it to xContent, and finally",
          "+    // parsing it back as a client object. We check equality between the original client object, and the parsed one.",
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Submit a job that will start after DEFAULT_STARTING_INTERVAL, and reschedule itself after running",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Exception indicating that not all requested operations from {@link LuceneChangesSnapshot}",
          "+ * are available.",
          "+ */",
          "+                        // Flatten multipoints",
          "+    /**",
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     */",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * Adds a new retention lease.",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+     */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Write action responsible for syncing retention leases to replicas. This action is deliberately a write action so that if a replica misses",
          "+ * a retention lease sync then that shard will be marked as stale.",
          "+ */",
          "+    /**",
          "+     * Sync the specified retention leases for the specified shard. The callback is invoked when the sync succeeds or fails.",
          "+     *",
          "+     * @param shardId         the shard to sync",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback to invoke when the sync completes normally or abnormally",
          "+     */",
          "+            // we have to execute under the system context so that if security is enabled the sync is authorized",
          "+        // we flush to ensure that retention leases are committed",
          "+        // we flush to ensure that retention leases are committed",
          "+            // ignore",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A functional interface that represents a method for syncing retention leases to replica shards after a new retention lease is added on",
          "+ * the primary.",
          "+ */",
          "+    /**",
          "+     * Represents a method that when invoked syncs retention leases to replica shards after a new retention lease is added on the primary.",
          "+     * The specified listener is invoked when the syncing completes with success or failure.",
          "+     *",
          "+     * @param shardId         the shard ID",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback when sync completes",
          "+     */",
          "+    /**",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned.",
          "+     *",
          "+     * @return the retention leases",
          "+     */",
          "+     * Adds a new retention lease.",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+     */",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+    /**",
          "+     * Updates retention leases on a replica.",
          "+     *",
          "+     * @param retentionLeases the retention leases",
          "+     */",
          "+         * @param retentionLeaseSyncer   a callback when this shard syncs retention leases",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+     * For xContent roundtrip testing we force the xContent output to still contain types because the parser",
          "+     * still expects them. The new typeless parsing is implemented in the client side GetFieldMappingsResponse.",
          "+    /**",
          "+     * For xContent roundtrip testing we force the xContent output to still contain types because the parser",
          "+     * still expects them. The new typeless parsing is implemented in the client side GetMappingsResponse.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+        // the retention leases on the shard should be flushed",
          "+        // we should forward the request containing the current retention leases to the replica",
          "+        // we should start with an empty replication response",
          "+        // the retention leases on the shard should be updated",
          "+        // the retention leases on the shard should be flushed",
          "+        // the result should indicate success",
          "+        // execution happens on the test thread, so no need to register an actual listener to callback",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // we will add multiple retention leases and expect to see them synced to all replicas",
          "+            // check retention leases have been committed on the primary",
          "+            // check current retention leases have been synced to all replicas",
          "+                // check retention leases have been committed on the replica",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // check current retention leases have been synced to all replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+                // Always true because we include 'other' in the agg",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Convert geo point into a hash string (bucket string ID)",
          "+     */",
          "+    /**",
          "+     * Create a new named {@link GeoGridAggregationBuilder}-derived builder",
          "+     */",
          "+            // Intentionally not writing any docs",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGrid}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGridBucket}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Encode longitude and latitude with a given precision as a long hash.",
          "+     */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+            // Make it easy to detect this error in ShardFollowNodeTask:",
          "+            // (adding a metadata header instead of introducing a new exception that extends ElasticsearchException)",
          "+        // Do restore from repository here and after that",
          "+        // start() should be invoked and stats should be reset",
          "+        // For now handle like any other failure:",
          "+        // need a more robust approach to avoid the scenario where an outstanding request",
          "+        // can trigger another restore while the shard was restored already.",
          "+        // https://github.com/elastic/elasticsearch/pull/37562#discussion_r250009367",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+     * A good starting name for the index storing the job's results.",
          "+     * This defaults to the shared results index if a specific index name is not set.",
          "+     * This method must <em>only</em> be used during initial job creation.",
          "+     * After that the read/write aliases must always be used to access the job's",
          "+     * results index, as the underlying index may roll or be reindexed.",
          "+     * @return The job's initial results index name",
          "+     * Get the unmodified <code>results_index_name</code> field from the job.",
          "+     * This is provided to allow a job to be copied via the builder.",
          "+     * After creation this does not necessarily reflect the actual concrete",
          "+     * index used by the job.  A job's results must always be read and written",
          "+     * using the read and write aliases.",
          "+     * @return The job's configured \\'index name\\'",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Make the job's results span an extra two indices, i.e. three in total.",
          "+        // To do this the job's results alias needs to encompass all three indices.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+        // Step 8. If we did not drop the indices and after DBQ state done, we delete the aliases",
          "+        // Step 7. If we did not delete the indices, we run a delete by query",
          "+        // Step 6. If we have any hits, that means we are NOT the only job on these indices, and should not delete the indices.",
          "+        // If we do not have any hits, we can drop the indices and then skip the DBQ and alias deletion.",
          "+        // Step 5. Determine if we are on shared indices by looking at whether the initial index was \\'.ml-anomalies-shared\\'",
          "+        // or whether the indices that the job's results alias points to contain any documents from other jobs.",
          "+        // TODO: this check is currently assuming that a job's results indices are either ALL shared or ALL",
          "+        // dedicated to the job.  We have considered functionality like rolling jobs that generate large",
          "+        // volumes of results from shared to dedicated indices.  On deletion such a job would have a mix of",
          "+        // shared indices requiring DBQ and dedicated indices that could be simply dropped.  The current",
          "+        // functionality would apply DBQ to all these indices, which is safe but suboptimal.  So this functionality",
          "+        // should be revisited when we add rolling results index functionality, especially if we add the ability",
          "+        // to switch a job over to a dedicated index for future results.",
          "+                    // The job may no longer be using the initial shared index, but if it started off on a",
          "+                    // shared index then it will still be on a shared index even if it's been reindexed",
          "+                        // don't bother searching the index any further, we are on the default shared",
          "+                        // don't bother searching the index any further - it's already been closed or deleted",
          "+        // Step 4. Get the job as the initial result index name is required",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process.",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * <p>",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     * <p>",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     * <p>",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     *",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener            Alerted when tasks are unassignd",
          "+     */",
          "+    // TODO: remove this method when Java time formats are the default",
          "+                        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0",
          "+        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+    // This is because parsing timestamps using Joda formats generates warnings.",
          "+    // Eventually we'll probably just remove the checks that the Joda formats",
          "+    // are valid, and at that point this method can be removed too.",
          "+    // This method is using the Joda BWC layer.  When that's removed, this method",
          "+    // can be deleted - we'll just validate the Java time formats after that.",
          "+    // Also remove enableWarningsCheck() above if this method is removed.",
          "+        // user_d can view repos and create and view snapshots on existings repos, everything else is DENIED",
          "+        // user_d can create snapshots, but not concurrently",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // view repositories",
          "+        // view all indices, including restricted ones",
          "+        // create snapshot that includes restricted indices",
          "+        // view snapshots for repo",
          "+        // try search all",
          "+        // try create index",
          "+        // try create another repo",
          "+        // try delete repo",
          "+        // try fumble with snapshots",
          "+        // try destructive/revealing actions on all indices",
          "+        // Use a custom index because other rolling upgrade tests meddle with the shared index",
          "+            // The name of the concrete index underlying the results index alias may or may not have been changed",
          "+            // by the upgrade process (depending on what other tests are being run and the order they're run in),",
          "+            // so navigating to the next level of the tree must account for both cases"
        ]
      },
      "'a7c75e5853f0047452d48cdeda7b90ec3c261497'": {
        "cm": "'feedback'",
        "comments": [
          "+    /**",
          "+     * only perform this request if the document was last modification was assigned the given",
          "+     * sequence number. Must be used in combination with {@link #setIfPrimaryTerm(long)}",
          "+     *",
          "+     * If the document last modification was assigned a different sequence number a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * only performs this request if the document was last modification was assigned the given",
          "+     * primary term. Must be used in combination with {@link #setIfSeqNo(long)}",
          "+     *",
          "+     * If the document last modification was assigned a different term a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * If set, only perform this request if the document was last modification was assigned this sequence number.",
          "+     * If the document last modification was assigned a different sequence number a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * If set, only perform this request if the document was last modification was assigned this primary term.",
          "+     *",
          "+     * If the document last modification was assigned a different term a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+     * only perform this update request if the document's modification was assigned the given",
          "+     * only performs this update request if the document's last modification was assigned the given"
        ]
      },
      "'536efacffe8f402b2555be03ee7f90b727a67d35'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action"
        ]
      },
      "'1e8fb04b80aed5b907e2cf53fa2b45295f64573e'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": ["+        // test the fields is not overwritten"]
      },
      "'42ad9d43bc6bf13f0522574d6e5431efe1cb0e6d'": {
        "cm": "'conditional'",
        "comments": []
      },
      "'d6fbfae1c569c69091430288253e75f5e952c3ba'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": [
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */"
        ]
      }
    }
  },
  "elastic/elasticsearch_37869": {
    "id": "elastic/elasticsearch_37869",
    "body": "'Previously casting from a DATE[TIME] type to a numeric (DOUBLE, LONG,\\r\\nINT, etc. used seconds instead of the epoch millis.\\r\\n\\r\\nFixes: #37655'",
    "cms": [
      "'SQL: Fix casting from date to numeric type to use millis\\n\\nPreviously casting from a DATE[TIME] type to a numeric (DOUBLE, LONG,\\nINT, etc. used seconds instead of the epoch millis.\\n\\nFixes: #37655'"
    ],
    "commits": {
      "'615d56f58670c20306ad301bc36a79aa4a36a78e'": {
        "cm": "'SQL: Fix casting from date to numeric type to use millis\\n\\nPreviously casting from a DATE[TIME] type to a numeric (DOUBLE, LONG,\\nINT, etc. used seconds instead of the epoch millis.\\n\\nFixes: #37655'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37859": {
    "id": "elastic/elasticsearch_37859",
    "body": "'The `TransportUnfollowAction` updates the index settings but does not increase the settings version to reflect that change.\\r\\n\\r\\nThis issue has been caught while working on the replication of closed indices (#33888). The `IndexFollowingIT.testUnfollowIndex()` started to fail and [this specific assertion](https://github.com/elastic/elasticsearch/blob/43bfdd32eea161a9084d7b49b12261ea32a7983c/server/src/main/java/org/elasticsearch/index/IndexService.java#L643) tripped. It does not happen on `master` branch today because index metadata for closed indices are never updated in `IndexService` instances, but this is something that is going to change with the replication of closed indices.'",
    "cms": [
      "'TransportUnfollowAction should increase settings version'",
      "'add missing space'"
    ],
    "commits": {
      "'e60f959f8fd2d3d1ee8e38a13cc4889f07a0c657'": {
        "cm": "'TransportUnfollowAction should increase settings version'",
        "comments": []
      },
      "'ad049237765106bc8e91a31f97da70181b54d373'": {
        "cm": "'add missing space'",
        "comments": []
      }
    }
  }
}
